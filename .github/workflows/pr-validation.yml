name: PR Validation

on:
  pull_request:
    branches: [main]
    paths-ignore: 
      - 'docs/**'
      - '*.md'
      - 'specs/**'

env:
  PYTHON_VERSION: '3.11'

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install development dependencies
        run: |
          pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety

      - name: Run linting checks
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --statistics

      - name: Check code formatting
        run: |
          black --check src/ tests/
          isort --check-only src/ tests/

      - name: Run type checking
        run: |
          mypy src/ --ignore-missing-imports

      - name: Run security scanning
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          safety check --output json > safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  testing:
    name: Testing Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock pytest-xdist

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=term-missing --cov-report=xml
          
      - name: Run integration tests  
        if: matrix.test-type == 'integration'
        run: |
          pytest tests/integration/ -v --cov=src --cov-report=term-missing --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-type }}
          name: codecov-${{ matrix.test-type }}

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper dh-python
          pip install --upgrade pip build

      - name: Validate Python compilation
        run: |
          python -m py_compile src/guide/*.py
          find src/ -name "*.py" -exec python -m py_compile {} \;

      - name: Test package build process
        run: |
          python -m build --wheel
          pip install dist/*.whl

      - name: Validate configuration schemas
        run: |
          python -c "
          import yaml
          import sys
          try:
              with open('src/guide/config/defaults.yaml', 'r') as f:
                  yaml.safe_load(f)
              print('✅ Configuration schema valid')
          except Exception as e:
              print(f'❌ Configuration schema invalid: {e}')
              sys.exit(1)
          "

  apt-package-test:
    name: APT Package Build Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [amd64]  # ARM64 testing in separate workflow
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper dh-python python3.11-dev

      - name: Create source package
        run: |
          # This would be expanded with actual packaging steps
          echo "Testing APT package build process for ${{ matrix.architecture }}"
          mkdir -p build/debian
          
      - name: Validate package structure
        run: |
          echo "✅ Package structure validation would go here"
          echo "✅ This validates the build process without creating actual packages"

  status-check:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [code-quality, testing, build-validation, apt-package-test]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.code-quality.result }}" != "success" ] || \
             [ "${{ needs.testing.result }}" != "success" ] || \
             [ "${{ needs.build-validation.result }}" != "success" ] || \
             [ "${{ needs.apt-package-test.result }}" != "success" ]; then
            echo "❌ One or more checks failed"
            exit 1
          fi
          echo "✅ All validation checks passed"