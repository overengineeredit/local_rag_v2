name: Build Packages

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      architecture:
        description: 'Architecture to build'
        required: true
        default: 'both'
        type: choice
        options: ['arm64', 'amd64', 'both']

env:
  PYTHON_VERSION: '3.11'

jobs:
  build-matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set build matrix
        id: set-matrix
        run: |
          if [ "${{ github.event.inputs.architecture }}" = "arm64" ]; then
            echo 'matrix={"include":[{"arch":"arm64","runner":"ubuntu-latest"}]}' >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.architecture }}" = "amd64" ]; then
            echo 'matrix={"include":[{"arch":"amd64","runner":"ubuntu-latest"}]}' >> $GITHUB_OUTPUT
          else
            echo 'matrix={"include":[{"arch":"arm64","runner":"ubuntu-latest"},{"arch":"amd64","runner":"ubuntu-latest"}]}' >> $GITHUB_OUTPUT
          fi

  build-packages:
    name: Build APT Package (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    needs: build-matrix
    strategy:
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
      fail-fast: false
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version detection

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install cross-compilation tools (ARM64)
        if: matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu qemu-user-static

      - name: Install build dependencies
        run: |
          sudo apt-get install -y build-essential debhelper dh-python python3.11-dev
          pip install --upgrade pip build setuptools wheel

      - name: Get version from git
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.ref_name }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix
          else
            VERSION="$(git describe --tags --always --dirty)-dev"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Python wheel
        run: |
          python -m build --wheel
          echo "Built wheel: $(ls dist/*.whl)"

      - name: Create Debian package structure
        run: |
          mkdir -p build/debian/DEBIAN
          mkdir -p build/debian/usr/local/bin
          mkdir -p build/debian/usr/lib/python3.11/site-packages
          mkdir -p build/debian/etc/local-rag
          mkdir -p build/debian/etc/systemd/system
          mkdir -p build/debian/var/lib/local-rag

      - name: Generate control file
        run: |
          cat > build/debian/DEBIAN/control << EOF
          Package: local-rag
          Version: ${{ steps.version.outputs.version }}
          Section: misc
          Priority: optional
          Architecture: ${{ matrix.arch }}
          Depends: python3.11, python3-pip, systemd
          Maintainer: Local RAG Team <team@localrag.dev>
          Description: Local RAG system for document question answering
           A CPU-optimized RAG system using ChromaDB and llama-cpp-python
           for local document question answering without external dependencies.
          EOF

      - name: Create installation scripts
        run: |
          # Post-installation script
          cat > build/debian/DEBIAN/postinst << 'EOF'
          #!/bin/bash
          set -e
          
          # Create local-rag user
          useradd --system --home /var/lib/local-rag --shell /bin/false local-rag || true
          
          # Create directories
          mkdir -p /var/lib/local-rag/{content,models,chromadb}
          mkdir -p /var/log/local-rag
          
          # Set permissions
          chown -R local-rag:local-rag /var/lib/local-rag
          chown -R local-rag:local-rag /var/log/local-rag
          
          # Enable and start service
          systemctl daemon-reload
          systemctl enable local-rag
          systemctl start local-rag || true
          EOF
          
          chmod 755 build/debian/DEBIAN/postinst

      - name: Copy application files
        run: |
          # Install Python package
          cp -r src/guide/* build/debian/usr/lib/python3.11/site-packages/
          
          # Create executable
          cat > build/debian/usr/local/bin/local-rag << 'EOF'
          #!/usr/bin/env python3
          import sys
          sys.path.insert(0, '/usr/lib/python3.11/site-packages')
          from guide.main import main
          if __name__ == "__main__":
              main()
          EOF
          chmod 755 build/debian/usr/local/bin/local-rag
          
          # Copy configuration
          cp src/guide/config/defaults.yaml build/debian/etc/local-rag/config.yaml

      - name: Create systemd service
        run: |
          cat > build/debian/etc/systemd/system/local-rag.service << 'EOF'
          [Unit]
          Description=Local RAG System
          After=network.target
          Wants=network.target
          
          [Service]
          Type=exec
          User=local-rag
          Group=local-rag
          ExecStart=/usr/local/bin/local-rag serve
          WorkingDirectory=/var/lib/local-rag
          Environment=LOCAL_RAG_CONFIG=/etc/local-rag/config.yaml
          Restart=always
          RestartSec=10
          
          [Install]
          WantedBy=multi-user.target
          EOF

      - name: Build Debian package
        run: |
          cd build
          dpkg-deb --build debian local-rag_${{ steps.version.outputs.version }}_${{ matrix.arch }}.deb
          
      - name: Validate package
        run: |
          cd build
          dpkg --info local-rag_${{ steps.version.outputs.version }}_${{ matrix.arch }}.deb
          dpkg --contents local-rag_${{ steps.version.outputs.version }}_${{ matrix.arch }}.deb

      - name: Test package installation (AMD64 only)
        if: matrix.arch == 'amd64'
        run: |
          cd build
          # Test in Docker container to avoid affecting the runner
          docker run --rm -v $(pwd):/packages ubuntu:22.04 bash -c "
            apt-get update && 
            apt-get install -y python3.11 python3-pip systemd &&
            dpkg -i /packages/local-rag_${{ steps.version.outputs.version }}_amd64.deb ||
            apt-get install -f -y
          "

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: local-rag-${{ matrix.arch }}-${{ steps.version.outputs.version }}
          path: build/local-rag_${{ steps.version.outputs.version }}_${{ matrix.arch }}.deb
          retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-packages
    if: github.event_name == 'release'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: packages

      - name: Upload packages to release
        uses: softprops/action-gh-release@v1
        with:
          files: packages/*/*.deb
          token: ${{ secrets.GITHUB_TOKEN }}